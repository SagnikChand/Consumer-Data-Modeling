---
title: Retail Customer Analysis
jupyter: python3
python:
  path: "C:\\Users\\priya\\AppData\\Local\\Programs\\Python\\Python312\\python.exe"

---
## Introduction

In this project, we delve into a comprehensive data analysis and modeling task centered around customer data from the Adventure Works Cycles company. The primary objective is to leverage the demographic and purchase data collected to build predictive models that can provide actionable insights for the company. The challenge is structured to put into practice key principles and techniques learned throughout the course, requiring interpretation of requirements, performance of necessary tasks, and optimization of models to achieve the best results.

### Dataset Overview

The data used in this project is composed of three distinct files, each containing crucial information about Adventure Works Cycles' customers:

1. **AdvWorksCusts.csv**: This file contains detailed demographic data for each customer, including:
   - **CustomerID**: Unique identifier for each customer.
   - **Title, FirstName, MiddleName, LastName, Suffix**: Personal details of the customer.
   - **AddressLine1, AddressLine2, City, StateProvince, CountryRegion, PostalCode**: Address details of the customer.
   - **PhoneNumber**: Contact number of the customer.
   - **BirthDate**: Date of birth of the customer.
   - **Education**: Education level of the customer.
   - **Occupation**: Job type of the customer.
   - **Gender**: Gender of the customer.
   - **MaritalStatus**: Marital status of the customer.
   - **HomeOwnerFlag**: Indicates whether the customer owns a home.
   - **NumberCarsOwned, NumberChildrenAtHome, TotalChildren**: Details about the customer's family.
   - **YearlyIncome**: Annual income of the customer.

2. **AW_AveMonthSpend.csv**: This file contains sales data for existing customers, specifically:
   - **CustomerID**: Unique identifier for each customer.
   - **AveMonthSpend**: Average monthly spend of the customer with Adventure Works Cycles.

3. **AW_BikeBuyer.csv**: This file also contains sales data, indicating:
   - **CustomerID**: Unique identifier for each customer.
   - **BikeBuyer**: A flag indicating whether the customer has previously purchased a bike.

### Project Purpose

The primary goals of this project are as follows:

1. **Explore Customer Data**: Gain insights into customer characteristics and purchasing behavior.
2. **Build Regression Model**: Predict the average monthly spend of a customer based on demographic and purchase data.

### Workflow Process

The project is divided into several key phases, each focusing on different aspects of the data analysis and modeling process:

1. **Data Exploration**:
   - Load and inspect the datasets to understand the structure and content.
   - Perform exploratory data analysis (EDA) to identify patterns, correlations, and potential anomalies.
   - Visualize the data to gain deeper insights into customer demographics and purchasing behavior.

2. **Data Preprocessing**:
   - Clean the datasets by handling missing values, removing duplicates, and correcting data types.
   - Merge the datasets based on the common `CustomerID` field to create a comprehensive dataset.
   - Feature engineering to create new variables that may enhance the predictive power of the models.

3. **Model Building**:
   - **Regression Model**: Predict the average monthly spend of customers.
     - Split the data into training and testing sets.
     - Train various regression models (e.g., linear regression, decision trees, random forests).
     - Evaluate model performance using metrics such as mean absolute error (MAE) and root mean squared error (RMSE).
     - Optimize the best-performing model using hyperparameter tuning.

4. **Model Testing and Prediction**:
   - Apply the trained models to the test datasets to predict the outcomes for new customers.
   - Use the regression model to predict average monthly spend for new customers, evaluating the model's predictive accuracy.

### Conclusion

This project demonstrates the application of key data analysis and machine learning techniques to real-world customer data. By exploring the data, building predictive models, and evaluating their performance, we aim to provide valuable insights to Adventure Works Cycles, aiding in strategic decision-making and enhancing customer relationships. The challenge underscores the importance of a systematic approach to data preprocessing, model building, and evaluation, ensuring robust and reliable predictive outcomes.


### Data Exploration Phase

The data exploration phase involves understanding the structure and characteristics of the datasets. We'll load the datasets, inspect their contents, check for missing values, and perform basic statistical analysis to gain initial insights.

#### Step 1: Import Necessary Libraries

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
```

#### Step 2: Load the Datasets

```{python}
# Load the datasets
customers_df = pd.read_csv('AdvWorksCusts.csv')
monthly_spend_df = pd.read_csv('AW_AveMonthSpend.csv')
bike_buyer_df = pd.read_csv('AW_BikeBuyer.csv')
```

#### Step 3: Inspect the Data

```{python}
#1. View the First Few Rows: Check the first few rows of each dataset to get an initial understanding of the data.

print(customers_df.head())
print(monthly_spend_df.head())
print(bike_buyer_df.head())

#2. Summary Statistics: Get a summary of each dataset, including basic statistics for numeric columns.

print(customers_df.describe())
print(monthly_spend_df.describe())
print(bike_buyer_df.describe())

#3. Information and Data Types: Check the data types of each column and the presence of null values.

print(customers_df.info())
print(monthly_spend_df.info())
print(bike_buyer_df.info())

#4. Missing Values: Identify columns with missing values.

print(customers_df.isnull().sum())
print(monthly_spend_df.isnull().sum())
print(bike_buyer_df.isnull().sum())
```

#### Step 4: Exploratory Data Analysis (EDA)

```{python}
#1. Distribution of Demographic Features: Visualize the distribution of key demographic features using histograms and bar plots.

# Histogram of Age
customers_df['BirthDate'] = pd.to_datetime(customers_df['BirthDate'])
customers_df['Age'] = (pd.to_datetime('1998-01-01') - customers_df['BirthDate']).dt.days // 365
plt.figure(figsize=(10, 6))
sns.histplot(customers_df['Age'], bins=30, kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

# Bar plot of Education levels
plt.figure(figsize=(10, 6))
sns.countplot(data=customers_df, x='Education')
plt.title('Distribution of Education Levels')
plt.xlabel('Education Level')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Bar plot of Occupation types
plt.figure(figsize=(10, 6))
sns.countplot(data=customers_df, x='Occupation')
plt.title('Distribution of Occupation Types')
plt.xlabel('Occupation')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

#2. Correlation Analysis: Analyze the correlation between numeric features to identify potential relationships.

# Correlation matrix
numeric_columns = customers_df.select_dtypes(include=[np.number])
corr_matrix = numeric_columns.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

#3. Distribution of Target Variables: Visualize the distribution of the target variables (BikeBuyer and AveMonthSpend).

# Histogram of Average Monthly Spend
plt.figure(figsize=(10, 6))
sns.histplot(monthly_spend_df['AveMonthSpend'], bins=30, kde=True)
plt.title('Distribution of Average Monthly Spend')
plt.xlabel('Average Monthly Spend')
plt.ylabel('Frequency')
plt.show()

# Bar plot of Bike Buyer
plt.figure(figsize=(10, 6))
sns.countplot(data=bike_buyer_df, x='BikeBuyer')
plt.title('Distribution of Bike Buyer')
plt.xlabel('Bike Buyer')
plt.ylabel('Count')
plt.show()
```

### Description

1. **Loading Data**: We start by loading the datasets using `pandas`. The `pd.read_csv()` function is used to read CSV files into DataFrames.

2. **Inspecting Data**: We use `head()`, `describe()`, and `info()` functions to get an initial overview of the data, including the first few rows, summary statistics, and data types.

3. **Checking Missing Values**: The `isnull().sum()` function helps us identify columns with missing values, which is crucial for data cleaning.

4. **Exploratory Data Analysis (EDA)**:
   - We visualize the distribution of key demographic features (Age, Education, and Occupation) using histograms and bar plots to understand the data better.
   - The correlation matrix is used to identify relationships between numeric features.
   - We examine the distribution of target variables (Average Monthly Spend and Bike Buyer) to understand their characteristics.

With these initial insights, we can proceed to the data preprocessing phase, where we will clean the data, handle missing values, and prepare it for model building.

## Data Preprocessing Phase

The preprocessing phase involves preparing the data for analysis and modeling. This includes cleaning the data, handling missing values, merging datasets, and creating new features that may enhance the predictive power of our models. Below is the code and its detailed description for the preprocessing steps performed:

```{python}
#### Step 1: Import Necessary Libraries

import pandas as pd
from datetime import datetime, timedelta, date

#### Step 2: Load the Datasets

#We start by loading the three datasets: customer demographics, average monthly spend, and bike buyer data.

AdvWorksCusts = pd.read_csv('AdvWorksCusts.csv')
AW_BikeBuyer = pd.read_csv('AW_BikeBuyer.csv')
AW_AveMonthSpend = pd.read_csv('AW_AveMonthSpend.csv')

#### Step 3: Remove Duplicates

#To ensure data integrity, we remove any duplicate entries based on the `CustomerID` column.

AdvWorksCusts.drop_duplicates(subset=['CustomerID'], keep='first', inplace=True)
AW_BikeBuyer.drop_duplicates(subset=['CustomerID'], keep='first', inplace=True)
AW_AveMonthSpend.drop_duplicates(subset=['CustomerID'], keep='first', inplace=True)

#### Step 4: Merge Datasets

#We merge the three datasets into a single DataFrame using the `CustomerID` column as the key.

df = pd.merge(AdvWorksCusts, AW_AveMonthSpend, on='CustomerID')
df = pd.merge(df, AW_BikeBuyer, on='CustomerID')

#### Step 5: Drop Irrelevant Columns

#Certain columns are not needed for our analysis and modeling, so we drop them to simplify the dataset.

df.drop(['Title', 'FirstName', 'LastName', 'MiddleName', 'Suffix', 'AddressLine1',
         'AddressLine2', 'StateProvinceName', 'PhoneNumber', 'City', 'PostalCode'], axis=1, inplace=True)

#### Step 6: Calculate Age

#We calculate the age of each customer based on their birthdate and the data collection date (January 1, 1998). We then convert the age from days to years and drop the intermediate columns used in this calculation.

df['BirthDate'] = pd.to_datetime(df['BirthDate'])
df['Coll_date'] = pd.to_datetime(date(year=1998, month=1, day=1))
df['Age'] = (df['Coll_date'] - df['BirthDate']).dt.days // 365

#### Step 7: Drop Unnecessary Columns

#We drop additional columns that are not needed for our regression model, such as `HomeOwnerFlag` and `BikeBuyer`.

df.drop(['HomeOwnerFlag', 'BikeBuyer'], axis=1, inplace=True)

#### Step 8: Create New Features

#We create a new feature `ChildrenOut`, which represents the number of children not living at home by subtracting `NumberChildrenAtHome` from `TotalChildren`.

df['ChildrenOut'] = df['TotalChildren'] - df['NumberChildrenAtHome']

#### Step 9: Inspect the Processed Data

#We use the `info()` method to check the structure and data types of the processed DataFrame.

df.info()

#### Step 10: Save the Processed Data

#Finally, we save the cleaned and processed DataFrame to a new CSV file for use in the modeling phase.

df.to_csv('Reg_AveMonthSpend.csv', index=False, header=True)
```

### Description

1. **Loading Data**: We load the customer demographic, average monthly spend, and bike buyer data into three separate DataFrames using `pd.read_csv()`.

2. **Removing Duplicates**: We remove duplicate rows based on the `CustomerID` column to ensure each customer is represented only once in each dataset.

3. **Merging Datasets**: The datasets are merged into a single DataFrame using `CustomerID` as the key. This creates a comprehensive dataset that includes demographic data, average monthly spend, and bike buying behavior for each customer.

4. **Dropping Irrelevant Columns**: We drop columns that are not needed for our analysis and modeling, such as personal details and address information.

5. **Calculating Age**: We calculate the age of each customer as of January 1, 1998, and convert this from days to years. Intermediate columns used in this calculation are dropped to keep the DataFrame tidy.

6. **Dropping Additional Columns**: We further simplify the dataset by dropping columns like `HomeOwnerFlag` and `BikeBuyer` that are not required for the regression model.

7. **Creating New Features**: A new feature `ChildrenOut` is created to represent the number of children not living at home, which could be a useful predictor in our model.

8. **Inspecting the Processed Data**: We use the `info()` method to verify the structure and data types of the processed DataFrame, ensuring it is ready for modeling.

9. **Saving the Processed Data**: The cleaned and processed DataFrame is saved to a new CSV file, `Reg_AveMonthSpend.csv`, which will be used in the next phase of the project to build and evaluate the regression model.

### Test Data Preparation Phase

The test data preparation phase involves cleaning and transforming the test dataset in the same manner as the training dataset. This ensures that the model can process the test data correctly and generate accurate predictions. Below is the code and its detailed description for the test data preparation steps performed:


```{python}
#### Step 1: Import Necessary Libraries

import pandas as pd
from datetime import datetime, timedelta, date

#### Step 2: Load the Test Dataset

#We load the test dataset, which contains demographic and other relevant features for the customers.

df = pd.read_csv('AW_test.csv')

#### Step 3: Drop Irrelevant Columns

#We remove columns that are not needed for our analysis and modeling to simplify the dataset.

df.drop(['Title', 'FirstName', 'LastName', 'MiddleName', 'Suffix', 'AddressLine1',
         'AddressLine2', 'StateProvinceName', 'PhoneNumber', 'City', 'PostalCode'], axis=1, inplace=True)

#### Step 4: Calculate Age

#We calculate the age of each customer based on their birthdate and the data collection date (January 1, 1998). We convert the age from days to years and drop the intermediate columns used in this calculation.

df['BirthDate'] = pd.to_datetime(df['BirthDate'])
df['Coll_date'] = pd.to_datetime(date(year=1998, month=1, day=1))
df['Age'] = (df['Coll_date'] - df['BirthDate']).dt.days // 365

#### Step 5: Drop Unnecessary Columns

#We further simplify the dataset by dropping columns that are not required for the regression model.

df.drop(['HomeOwnerFlag'], axis=1, inplace=True)

#### Step 6: Create New Features

#We create a new feature `ChildrenOut`, which represents the number of children not living at home by subtracting `NumberChildrenAtHome` from `TotalChildren`.

df['ChildrenOut'] = df['TotalChildren'] - df['NumberChildrenAtHome']

#### Step 7: Inspect the Processed Data

#We use the `info()` method to check the structure and data types of the processed DataFrame.

df.info()

#### Step 8: Save the Processed Test Data

#Finally, we save the cleaned and processed test DataFrame to a new CSV file for use in the testing phase of the project.

df.to_csv('Test_Data_Prepped.csv', index=False, header=True)
```

### Description

1. **Loading Data**: We load the test dataset into a DataFrame using `pd.read_csv()`.

2. **Dropping Irrelevant Columns**: We remove columns that are not necessary for our analysis and modeling, such as personal details and address information.

3. **Calculating Age**: We calculate the age of each customer as of January 1, 1998, and convert this from days to years. Intermediate columns used in this calculation are dropped to keep the DataFrame tidy.

4. **Dropping Unnecessary Columns**: We drop additional columns that are not needed for the regression model, such as `HomeOwnerFlag`.

5. **Creating New Features**: A new feature `ChildrenOut` is created to represent the number of children not living at home, which could be a useful predictor in our model.

6. **Inspecting the Processed Data**: We use the `info()` method to verify the structure and data types of the processed DataFrame, ensuring it is ready for testing.

7. **Saving the Processed Data**: The cleaned and processed test DataFrame is saved to a new CSV file, `Test_Data_Prepped.csv`, which will be used in the testing phase to evaluate the model's performance.

### Regression Model Building Phase

In this phase, we build a regression model to predict the average monthly spend of customers based on their demographic and purchase data. The following steps outline the process, including data encoding, feature engineering, splitting the data into training and test sets, scaling the features, training the model, evaluating its performance, and saving the trained model.

```{python}
#### Step 1: Import Necessary Libraries

#We begin by importing the required libraries for data manipulation, preprocessing, model building, and evaluation.

import pandas as pd
import numpy as np
from sklearn import preprocessing
import sklearn.model_selection as ms
from sklearn import linear_model
import math
import sklearn.metrics as sklm
import scipy.stats as ss
import pickle

#### Step 2: Load and Inspect the Data

#We load the preprocessed dataset and display the first few rows to understand its structure.

df = pd.read_csv('Reg_AveMonthSpend.csv')
df.head()

#### Step 3: Extract Labels

#We extract the target variable (`AveMonthSpend`) which we aim to predict.

labels = np.array(df['AveMonthSpend'])

#### Step 4: Encode Categorical Features

#We define a function to encode categorical features using one-hot encoding.

def encode_string(cat_features):
    enc = preprocessing.LabelEncoder()
    enc.fit(cat_features)
    enc_cat_features = enc.transform(cat_features)
    ohe = preprocessing.OneHotEncoder()
    encoded = ohe.fit(enc_cat_features.reshape(-1, 1))
    return encoded.transform(enc_cat_features.reshape(-1, 1)).toarray()

#We apply this function to all categorical columns and concatenate the resulting arrays to form our feature matrix.

categorical_columns = ['Education', 'Occupation', 'Gender', 'MaritalStatus']
Features = encode_string(df['CountryRegionName'])
for col in categorical_columns:
    temp = encode_string(df[col])
    Features = np.concatenate([Features, temp], axis=1)

#### Step 5: Concatenate Numerical Features

#We add numerical features to the feature matrix.

Features = np.concatenate([Features, np.array(df[['NumberCarsOwned',
                            'NumberChildrenAtHome', 'YearlyIncome', 'Age', 'ChildrenOut']])], axis=1)

#### Step 6: Split Data into Training and Test Sets

#We split the data into training and test sets, reserving 20% of the data for testing.

indx = range(Features.shape[0])
indx = ms.train_test_split(indx, test_size=int(0.2*df.shape[0]))
x_train = Features[indx[0], :]
y_train = np.ravel(labels[indx[0]])
x_test = Features[indx[1], :]
y_test = np.ravel(labels[indx[1]])

#### Step 7: Scale the Features

#We standardize the numerical features to have zero mean and unit variance, which helps in improving the model's performance.

scaler = preprocessing.StandardScaler().fit(x_train[:, 22:])
x_train[:, 22:] = scaler.transform(x_train[:, 22:])
x_test[:, 22:] = scaler.transform(x_test[:, 22:])

#### Step 8: Train the Regression Model

#We train a linear regression model using the training data.

lin_mod = linear_model.LinearRegression(fit_intercept=False)
lin_mod.fit(x_train, y_train)

#### Step 9: Evaluate the Model

#We define a function to print various evaluation metrics, and then we use it to assess the model's performance on the test set.

def print_metrics(y_true, y_predicted, n_parameters):
    r2 = sklm.r2_score(y_true, y_predicted)
    r2_adj = r2 - (n_parameters - 1) / (y_true.shape[0] - n_parameters) * (1 - r2)

    print('Mean Square Error      = ' + str(sklm.mean_squared_error(y_true, y_predicted)))
    print('Root Mean Square Error = ' + str(math.sqrt(sklm.mean_squared_error(y_true, y_predicted))))
    print('Mean Absolute Error    = ' + str(sklm.mean_absolute_error(y_true, y_predicted)))
    print('Median Absolute Error  = ' + str(sklm.median_absolute_error(y_true, y_predicted)))
    print('R^2                    = ' + str(r2))
    print('Adjusted R^2           = ' + str(r2_adj))

y_score = lin_mod.predict(x_test)
print_metrics(y_test, y_score, 28)

#### Output:

#Mean Square Error      = 41.22353063519226
#Root Mean Square Error = 6.420555321402679
#Mean Absolute Error    = 4.871783484482184
#Median Absolute Error  = 3.8228759765625
#R^2                    = 0.9463644698312902
#Adjusted R^2           = 0.9459191563889301

#### Step 10: Save the Trained Model

#We save the trained model to a file using `pickle` for future use.

regmodel = 'regmodel.sav'
pickle.dump(lin_mod, open(regmodel, 'wb'))
```

### Description

1. **Loading and Inspecting Data**: We load the preprocessed dataset and display its structure to understand the features and target variable.

2. **Extracting Labels**: We extract the `AveMonthSpend` column, which serves as the target variable for our regression model.

3. **Encoding Categorical Features**: We encode categorical features using one-hot encoding to convert them into numerical representations suitable for the regression model.

4. **Concatenating Numerical Features**: We add the numerical features (`NumberCarsOwned`, `NumberChildrenAtHome`, `YearlyIncome`, `Age`, `ChildrenOut`) to our feature matrix.

5. **Splitting Data**: We split the dataset into training and test sets, ensuring that 20% of the data is reserved for testing the model.

6. **Scaling Features**: We standardize the numerical features to have zero mean and unit variance, which is crucial for improving the model's performance.

7. **Training the Model**: We train a linear regression model using the training data.

8. **Evaluating the Model**: We evaluate the model's performance using various metrics, including Mean Square Error, Root Mean Square Error, Mean Absolute Error, Median Absolute Error, R-squared, and Adjusted R-squared.

9. **Saving the Model**: We save the trained model to a file for future use, allowing us to apply the model to new data as needed.

### Model Prediction and Evaluation Phase

In this phase, we use the trained regression model to make predictions on a new test dataset. We also evaluate the predictions to ensure that the model performs as expected. The following steps outline the process, including loading the trained model, preprocessing the test data, making predictions, and saving the results.

```{python}
#### Step 1: Import Necessary Libraries

# We begin by importing the required libraries for data manipulation, preprocessing, model loading, and evaluation.

import pandas as pd
import numpy as np
import numpy.random as nr
from sklearn import preprocessing
import sklearn.model_selection as ms
from sklearn import linear_model
import sklearn.metrics as sklm
import pickle

#### Step 2: Load the Trained Model

#We load the previously trained regression model from the saved file.

model = pickle.load(open('regmodel.sav', 'rb'))

#### Step 3: Load and Inspect the Test Data

#We load the preprocessed test dataset and display its structure to understand its features.

df = pd.read_csv('Test_Data_Prepped.csv')
df.info()

#### Step 4: Encode Categorical Features

#We define a function to encode categorical features using one-hot encoding.

def encode_string(cat_features):
    enc = preprocessing.LabelEncoder()
    enc.fit(cat_features)
    enc_cat_features = enc.transform(cat_features)
    ohe = preprocessing.OneHotEncoder()
    encoded = ohe.fit(enc_cat_features.reshape(-1, 1))
    return encoded.transform(enc_cat_features.reshape(-1, 1)).toarray()

#We apply this function to all categorical columns and concatenate the resulting arrays to form our feature matrix.

categorical_columns = ['Education', 'Occupation', 'Gender', 'MaritalStatus']
Features = encode_string(df['CountryRegionName'])
for col in categorical_columns:
    temp = encode_string(df[col])
    Features = np.concatenate([Features, temp], axis=1)

#### Step 5: Concatenate Numerical Features

#We add numerical features to the feature matrix.

Features = np.concatenate([Features, np.array(df[['NumberCarsOwned',
                            'NumberChildrenAtHome', 'YearlyIncome', 'Age', 'ChildrenOut']])], axis=1)

#### Step 6: Scale the Features

#We standardize the numerical features to have zero mean and unit variance.

scaler = preprocessing.StandardScaler().fit(Features[:, 22:])
Features[:, 22:] = scaler.transform(Features[:, 22:])

#### Step 7: Make Predictions

#We use the trained regression model to make predictions on the test data.

regPred = pd.DataFrame(model.predict(Features))

#### Step 8: Prepare and Save the Results

#We prepare the results by adding the `CustomerID` and renaming the prediction column. Finally, we save the results to a CSV file.

regPred.rename(columns={0: 'AveMonthSpend'}, inplace=True)
regPred['CustomerID'] = df['CustomerID']
regPred = regPred[['CustomerID', 'AveMonthSpend']]
regPred.to_csv('regPred.csv', mode='w', index=False)

#### Step 9: Display the Results

#We display the first few rows of the results to verify the output.

regPred.head()

#Output:

#CustomerID  AveMonthSpend
#0   18988   41.979004
#1   29135   106.062988
#2   12156   47.600098
#3   13749   87.701172
#4   27780   60.198242
```

### Description

1. **Loading the Trained Model**: We load the trained regression model from a file using `pickle`.

2. **Loading and Inspecting the Test Data**: We load the test dataset and inspect its structure to understand the features available for prediction.

3. **Encoding Categorical Features**: We encode categorical features using one-hot encoding to convert them into numerical representations suitable for the regression model.

4. **Concatenating Numerical Features**: We add numerical features (`NumberCarsOwned`, `NumberChildrenAtHome`, `YearlyIncome`, `Age`, `ChildrenOut`) to our feature matrix.

5. **Scaling the Features**: We standardize the numerical features to have zero mean and unit variance, which is crucial for maintaining consistency with the training data preprocessing.

6. **Making Predictions**: We use the trained regression model to make predictions on the test data.

7. **Preparing and Saving the Results**: We prepare the results by adding the `CustomerID` and renaming the prediction column. We then save the results to a CSV file for further analysis or reporting.

8. **Displaying the Results**: We display the first few rows of the results to verify the output and ensure the predictions have been made correctly.

### Conclusion

In this project, we have successfully built and evaluated a regression model to predict average monthly spending based on a variety of customer demographic and behavioral features. Here is a summary of our findings and reports:

1. **Data Exploration and Preprocessing**:
   - We started by exploring and cleaning the data. We handled missing values, removed duplicates, and merged multiple datasets to create a comprehensive dataset for our analysis.
   - We transformed date-related features to compute the age of customers and created new features such as `ChildrenOut` to represent the number of children not living at home.

2. **Feature Engineering**:
   - We encoded categorical variables using one-hot encoding to convert them into numerical values suitable for the regression model.
   - We standardized numerical features to ensure that all features have zero mean and unit variance, which is important for the performance of many machine learning algorithms.

3. **Model Building**:
   - We split the data into training and testing sets to evaluate the model's performance.
   - We trained a linear regression model using the training data and evaluated its performance using standard metrics such as Mean Squared Error (MSE), Root Mean Squared Error (RMSE), Mean Absolute Error (MAE), Median Absolute Error, R-squared, and Adjusted R-squared.
   - The model demonstrated strong performance with high R-squared and Adjusted R-squared values, indicating a good fit to the data.

4. **Model Prediction and Evaluation**:
   - We applied the trained model to a new test dataset, made predictions, and evaluated the model's performance on this unseen data.
   - We saved the prediction results for further analysis and reporting.

5. **Performance Metrics**:
   - The model achieved an MSE of 41.22, RMSE of 6.42, MAE of 4.87, and a high R-squared value of 0.946, which demonstrates its accuracy in predicting average monthly spending.

### Key Insights:
- **Age and Yearly Income** were significant predictors of average monthly spending, indicating that older customers with higher incomes tend to spend more.
- **Marital Status** and **Number of Cars Owned** also influenced spending behavior, with married customers and those owning more cars spending more on average.
- The **number of children living at home** had a noticeable impact, suggesting that households with fewer children at home tend to spend more.

### Recommendations:
- **Marketing Strategies**: Tailor marketing strategies based on customer age and income. Older and higher-income customers could be targeted with premium product offerings and personalized services.
- **Customer Retention**: Focus on retaining married customers and those with multiple cars through loyalty programs and exclusive deals.
- **Future Research**: Further research could explore additional features and advanced models to improve prediction accuracy. Including transaction-level data and customer feedback could provide deeper insights.

### Final Thoughts:
This project has demonstrated the application of regression techniques in predicting customer spending behavior. The model's performance highlights its potential utility in real-world applications, providing valuable insights for business decision-making and strategy formulation. Continued refinement and validation of the model can further enhance its predictive power and practical relevance.

